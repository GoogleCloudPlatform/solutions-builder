# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: E2E API Tests on GKE Microservices
on:
  pull_request:
    branches:
      - main
    paths:
      - "microservices/**"
      - "common/**"
      - "e2e/gke_api_tests/**"
      - "e2e/requirements.txt"
      - "e2e/utils/**"
      - "utils/**"
      - ".github/workflows/e2e_gke_api_test.yaml"
  workflow_dispatch:
env:
  PROJECT_ID: {{project_id}}
  SKAFFOLD_DEFAULT_REPO: gcr.io/{{project_id}}
  SKAFFOLD_NAMESPACE: default
  GKE_CLUSTER: main-cluster
  GKE_ZONE: {{gcp_region}}
  KUSTOMIZE_VERSION: 4.1.3
  SKAFFOLD_VERSION: 2.0.3
  SKAFFOLD_CACHE_GCS: gs://{{project_id}}.appspot.com/skaffold/cache

# copoier:raw {% raw %}
jobs:
  deploy:
    name: Deploy all microservices in PR namespace
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install gcloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{env.PROJECT_ID}}
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          export_default_credentials: true

      - name: Connect to cluster
        run: |
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

      - name: Install Kustomize
        run: |
          wget -O kustomize.tar.gz https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v$KUSTOMIZE_VERSION/kustomize_v${KUSTOMIZE_VERSION}_linux_amd64.tar.gz
          sudo tar -xvf kustomize.tar.gz -C /usr/local/bin/

      - name: Install Skaffold release binary
        run: |
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/v$SKAFFOLD_VERSION/skaffold-linux-amd64
          sudo install skaffold /usr/local/bin/skaffold

      - name: Set default repo for Skaffold
        run: |
          skaffold config set default-repo "$SKAFFOLD_DEFAULT_REPO"

      - name: Download Skaffold cache if exists
        run: |
          gsutil cp $SKAFFOLD_CACHE_GCS ~/.skaffold/ || true

      - name: Set up Kubernetes namespace and Service Account
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          NAMESPACE=e2e-pr-$PR_NUMBER
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          NAMESPACE=${NAMESPACE} bash setup/setup_ksa.sh

      - name: Build and deploy to cluster
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          NAMESPACE=e2e-pr-$PR_NUMBER
          export DATABASE_PREFIX=e2e_pr${PR_NUMBER}_
          skaffold run \
          --profile dev \
          --namespace $NAMESPACE \
          -l commit=$GITHUB_SHA \
          --tag PR${{ github.event.pull_request.number }}

      - name: Upload Skaffold cache
        if: always()
        run: |
          gsutil cp ~/.skaffold/cache $SKAFFOLD_CACHE_GCS

  e2e-api-test:
    runs-on: ubuntu-latest
    needs: deploy
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]

    steps:
      - uses: actions/checkout@v3

      - name: Install gcloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{env.PROJECT_ID}}
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          export_default_credentials: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-custom_exit_code pytest-cov pylint pytest-mock mock
          python -m pip install -r e2e/requirements.txt

      - name: Connect to cluster
        run: |
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

      - name: Set up port forwarding
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          NAMESPACE=e2e-pr-$PR_NUMBER
          python e2e/utils/port_forward.py --namespace $NAMESPACE

      - name: Cleaning up database
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          cd e2e/utils
          PYTHONPATH=../common/src DATABASE_PREFIX=e2e_pr${PR_NUMBER}_ python database_cleanup.py

      - name: Wait for 5s for database cleaning up
        run: sleep 5s
        shell: bash

      - name: Initialize database
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          cd e2e/utils
          PYTHONPATH=../common/src DATABASE_PREFIX=e2e_pr${PR_NUMBER}_ python database_setup.py

      - name: Run pytest
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          PYTHONPATH=common/src DATABASE_PREFIX=e2e_pr${PR_NUMBER}_ python -m pytest e2e/gke_api_tests/

  dataset-cleanup:
    runs-on: ubuntu-latest
    needs: e2e-api-test
    if: always()
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]

    steps:
      - uses: actions/checkout@v3

      # https://github.com/google-github-actions/auth
      - id: "auth"
        name: Auth with Service Account
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"
          # FIXME: Use workload identity instead of service account key.
          # workload_identity_provider: ''
          # service_account: 'deployment-dev@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-custom_exit_code pytest-cov pylint pytest-mock mock
          python -m pip install -r e2e/requirements.txt

      - name: Cleaning up database
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          cd e2e/utils
          PYTHONPATH=../common/src DATABASE_PREFIX=e2e_pr${PR_NUMBER}_ python database_cleanup.py

  deployment-cleanup:
    name: Clean up deployment in PR namespace
    needs: e2e-api-test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Install gcloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{env.PROJECT_ID}}
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          export_default_credentials: true

      - name: Connect to cluster
        run: |
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

      - name: Install Kustomize
        run: |
          wget -O kustomize.tar.gz https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v4.0.4/kustomize_v4.0.4_linux_amd64.tar.gz
          sudo tar -xvf kustomize.tar.gz -C /usr/local/bin/

      - name: Install Skaffold release binary
        run: |
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/v$SKAFFOLD_VERSION/skaffold-linux-amd64
          sudo install skaffold /usr/local/bin/skaffold

      - name: Set default repo for Skaffold
        run: |
          skaffold config set default-repo "$SKAFFOLD_DEFAULT_REPO"

      - name: Delete all deployments and namespace
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          NAMESPACE=e2e-pr-$PR_NUMBER
          skaffold delete --namespace $NAMESPACE
          kubectl delete namespace $NAMESPACE

# copoier:endraw {% endraw %}
